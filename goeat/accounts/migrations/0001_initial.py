# Generated by Django 3.2.3 on 2021-09-28 18:06

import accounts.utils
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('restaurant', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('name', models.CharField(max_length=30)),
                ('goeat_id', models.CharField(blank=True, default=accounts.utils.id_generator, editable=False, max_length=30, unique=True)),
                ('gender', models.CharField(default='', max_length=30)),
                ('age', models.IntegerField(default=0)),
                ('profile_img', models.IntegerField(default=0)),
                ('is_alarm', models.BooleanField(blank=True, default=False)),
                ('menu_soup_2_points', models.IntegerField(default=0)),
                ('menu_soup_1_points', models.IntegerField(default=0)),
                ('menu_soup_0_points', models.IntegerField(default=0)),
                ('is_spicy_1_points', models.IntegerField(default=0)),
                ('is_spicy_0_points', models.IntegerField(default=0)),
                ('is_cold_1_points', models.IntegerField(default=0)),
                ('is_cold_0_points', models.IntegerField(default=0)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fav_res', models.ManyToManyField(blank=True, related_name='fav_res_user', to='restaurant.Restaurant')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('menu_cannoteat', models.ManyToManyField(blank=True, related_name='menu_cannoteat_user', to='restaurant.MenuCannotEat')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MenuPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.menusecondclass')),
            ],
        ),
        migrations.CreateModel(
            name='NonMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('rank', models.IntegerField(default=0)),
                ('is_fav', models.BooleanField(default=False)),
                ('is_with', models.BooleanField(default=False)),
                ('menu_cannoteat', models.ManyToManyField(blank=True, related_name='menu_cannoteat_nonmember', to='restaurant.MenuCannotEat')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('menu_points', models.ManyToManyField(through='accounts.MenuPoint', to='restaurant.MenuSecondClass')),
                ('nonmembers', models.ManyToManyField(blank=True, to='accounts.NonMember')),
            ],
        ),
        migrations.CreateModel(
            name='UserTeamProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(default=6)),
                ('is_fav', models.BooleanField(default=0)),
                ('is_with', models.BooleanField(default=0)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(blank=True, default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='team',
            name='teammates',
            field=models.ManyToManyField(blank=True, related_name='team', through='accounts.UserTeamProfile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='team',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Stamp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stamp_own', models.IntegerField(default=0)),
                ('res_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='res_service', to='restaurant.resservice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stamp_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResReservationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('res_state', models.CharField(default='방문 예정', max_length=30)),
                ('additional_person', models.IntegerField(default=0)),
                ('additional_time', models.IntegerField(default=5)),
                ('res_start_time', models.DateTimeField(auto_now_add=True)),
                ('res_expect_time', models.DateTimeField(editable=False)),
                ('is_active', models.BooleanField(blank=True, default=True)),
                ('is_accepted', models.BooleanField(blank=True, default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='res_receiver', to='restaurant.restaurant')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='res_sender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MenuTypePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('menu_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.menutype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='menupoint',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.team'),
        ),
        migrations.CreateModel(
            name='MenuIngredientPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('menu_ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.menuingredient')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MenuFeaturePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('menu_feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.menufeature')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon_start_date', models.DateTimeField(auto_now_add=True)),
                ('coupon_due_date', models.DateTimeField(editable=False)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon', to='restaurant.restaurant')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_service', to='restaurant.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Alarm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.IntegerField(default=0)),
                ('is_read', models.BooleanField(default=False)),
                ('sent_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('receiver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alarm_receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alarm_sender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='menu_feature_points',
            field=models.ManyToManyField(through='accounts.MenuFeaturePoint', to='restaurant.MenuFeature'),
        ),
        migrations.AddField(
            model_name='user',
            name='menu_hate',
            field=models.ManyToManyField(blank=True, related_name='menu_hate_user', to='restaurant.MenuSecondClass'),
        ),
        migrations.AddField(
            model_name='user',
            name='menu_ingredient_points',
            field=models.ManyToManyField(through='accounts.MenuIngredientPoint', to='restaurant.MenuIngredient'),
        ),
        migrations.AddField(
            model_name='user',
            name='menu_like',
            field=models.ManyToManyField(blank=True, related_name='menu_like_user', to='restaurant.MenuSecondClass'),
        ),
        migrations.AddField(
            model_name='user',
            name='menu_type_points',
            field=models.ManyToManyField(through='accounts.MenuTypePoint', to='restaurant.MenuType'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
